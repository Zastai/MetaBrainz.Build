<?xml version="1.0" encoding="utf-8"?>
<!-- Deal With Versions (Assembly/Package). -->
<Project>

  <Target Name="_GetVCSInfo" DependsOnTargets="InitializeSourceControlInformation">
    <PropertyGroup>
      <_VCSBranchName />
      <_VCSInfo />
      <_VCSLocalChanges />
      <_VCSRevision />
      <_VCSTagName />
      <_VCSPackageInfo />
    </PropertyGroup>
    <PropertyGroup>
      <!-- Get the revision from SourceLink. -->
      <_VCSRevision Condition=" '$(SourceControlInformationFeatureSupported)' == 'true' And '$(SourceRevisionId)' != '' ">$(SourceRevisionId)</_VCSRevision>
    </PropertyGroup>
    <!-- TODO: Get info from git ourselves; SourceLink only provides the revision (commit hash). -->
    <PropertyGroup>
      <_VCSInfo>commit $(_VCSRevision)</_VCSInfo>
    </PropertyGroup>
  </Target>

  <Target Name="_ProcessVCSInfo" DependsOnTargets="_GetVCSInfo" />

  <Target Name="_AddContinuousIntegrationBuildInfo" AfterTargets="_GetVCSInfo" BeforeTargets="_ProcessVCSInfo">
    <PropertyGroup>
      <_CIBuildSuffix />
    </PropertyGroup>
    <PropertyGroup Condition=" '$(APPVEYOR)' == 'true' And '$(APPVEYOR_BUILD_NUMBER)' != '' ">
      <_CIBuildSuffix>appveyor.$(BUILD_NUMBER)</_CIBuildSuffix>
      <_VCSInfo Condition=" '$(_VCSInfo)' != '' ">$(_VCSInfo); AppVeyor build #$(BUILD_NUMBER)</_VCSInfo>
    </PropertyGroup>
    <!-- If no CI applies, mark it as a local build. -->
    <PropertyGroup Condition=" '$(_CIBuildSuffix)' == '' ">
      <_CIBuildSuffix>local</_CIBuildSuffix>
      <_VCSInfo Condition=" '$(_VCSInfo)' != '' ">$(_VCSInfo); local build</_VCSInfo>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(_CIBuildSuffix)' != '' ">
      <_VCSPackageInfo Condition=" '$(_VCSPackageInfo)' != '' ">$(_VCSPackageInfo).</_VCSPackageInfo>
      <_VCSPackageInfo>$(_VCSPackageInfo)$(_CIBuildSuffix)</_VCSPackageInfo>
    </PropertyGroup>
  </Target>

  <Target Name="_ShowVCSInfo" AfterTargets="_ProcessVCSInfo">
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSInfo)'         == '' " Text="No Version Control Information" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSInfo)'         != '' " Text="Version Control Information:" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSInfo)'         != '' " Text="- Description   : $(_VCSInfo)" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSLocalChanges)' != '' " Text="- Local Changes : $(_VCSLocalChanges)" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSRevision)'     != '' " Text="- Revision      : $(_VCSRevision)" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSBranchName)'   != '' " Text="- Branch        : $(_VCSBranchName)" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSTagName)'      != '' " Text="- Tag           : $(_VCSTagName)" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSPackageInfo)'  != '' " Text="- Package Info  : $(_VCSPackageInfo)" />
  </Target>

  <Target Name="_ParseVersionSpecification">
    <!-- First Step: Split using a regex. -->
    <PropertyGroup>
      <_VersionRegex>^\s*((\d+[.]\d+)(?:[.]\d+)?)(-[a-z0-9]+(?:[.][a-z0-9]+)*)?\s*$</_VersionRegex>
      <_Version_Full>$([System.Text.RegularExpressions.Regex]::Match('$(Version)', '$(_VersionRegex)').Groups[1].Value)</_Version_Full>
      <_Version_API>$([System.Text.RegularExpressions.Regex]::Match('$(Version)', '$(_VersionRegex)').Groups[2].Value)</_Version_API>
      <_Version_Pre>$([System.Text.RegularExpressions.Regex]::Match('$(Version)', '$(_VersionRegex)').Groups[3].Value)</_Version_Pre>
    </PropertyGroup>
    <!-- Second Step: Ensure this matched a version part. -->
    <Error Text="Version ('$(Version)') not specified or invalid: must be of the form MAJOR.MINOR[.PATCH][-prerelease]"
           Condition=" '$(_Version_API)' == '' "/>
    <!-- Third Step: Use the Version class to canonicalize the values. -->
    <PropertyGroup>
      <_Version_API>$([System.Version]::Parse('$(_Version_API)').ToString(2))</_Version_API>
      <_Version_Full>$([System.Version]::Parse('$(_Version_Full).0').ToString(3))</_Version_Full>
    </PropertyGroup>
    <!-- Final Step: Update Version (Canonical Form). -->
    <PropertyGroup>
      <Version>$(_Version_Full)$(_Version_Pre)</Version>
    </PropertyGroup>
  </Target>

  <Target Name="_SetAssemblyInfoPropertiesFromVersion" BeforeTargets="GenerateAdditionalSources" DependsOnTargets="_ProcessVCSInfo; _ParseVersionSpecification">
    <!-- TODO: Include Git info in informational version: 1.2-pre (branch '<branchname>', commit <commithash>). -->
    <PropertyGroup>
      <AssemblyVersion>$(_Version_API)</AssemblyVersion>
      <FileVersion>$(_Version_Full)</FileVersion>
      <InformationalVersion>$(Version)</InformationalVersion>
      <InformationalVersion Condition=" '$(_VCSInfo)' != '' ">$(AnubexVersion) ($(_VCSInfo))</InformationalVersion>
      <InformationalVersion Condition=" '$(_VCSInfo)' == '' ">$(AnubexVersion) (no version control)</InformationalVersion>
    </PropertyGroup>
    <!-- Debug Output -->
    <Message Importance="$(DebugMessageImportance)" Text="Assembly Info Properties Computed Using Version ('$(Version)'):"/>
    <Message Importance="$(DebugMessageImportance)" Text="- AssemblyVersion      : $(AssemblyVersion)"/>
    <Message Importance="$(DebugMessageImportance)" Text="- FileVersion          : $(FileVersion)"/>
    <Message Importance="$(DebugMessageImportance)" Text="- InformationalVersion : $(InformationalVersion)"/>
  </Target>

  <PropertyGroup>
    <!-- This ensures the PackageVersion computation is run both when building a project's package and when resolving a project reference to a package reference. -->
    <GetPackageVersionDependsOn>$(GetPackageVersionDependsOn); _SetPackagePropertiesFromVersion</GetPackageVersionDependsOn>
  </PropertyGroup>

  <Target Name="_SetPackagePropertiesFromVersion" DependsOnTargets="_GetVCSInfo; _ParseVersionSpecification" Condition=" '$(IsPackable)' != 'False' ">
    <PropertyGroup>
      <PackageVersion>$(Version)</PackageVersion>
      <PackageVersion Condition=" '$(_VCSPackageInfo)' != '' And '$(_Version_Pre)' == '' ">$(PackageVersion)+$(_VCSPackageInfo)</PackageVersion>
      <PackageVersion Condition=" '$(_VCSPackageInfo)' != '' And '$(_Version_Pre)' != '' ">$(PackageVersion).$(_VCSPackageInfo)</PackageVersion>
    </PropertyGroup>
    <PropertyGroup>
      <!-- NuGet warns about SemVer 2.0 features (like build identifiers). Shut that warning up. -->
      <NoWarn>$(NoWarn);NU5105</NoWarn>
    </PropertyGroup>
    <!-- Debug Output -->
    <Message Importance="$(DebugMessageImportance)" Text="Package Properties Computed Using Version ('$(Version)'):"/>
    <Message Importance="$(DebugMessageImportance)" Text="- PackageVersion : $(PackageVersion)"/>
  </Target>

  <Target Name="_AdjustPackageVersionForAppVeyorFeed" AfterTargets="_SetPackagePropertiesFromVersion" Condition=" '$(APPVEYOR)' != '' And '$(APPVEYOR_BUILD_NUMBER)' != '' ">
    <PropertyGroup>
      <PackageVersion>$(_Version_Full)-appveyor.$(APPVEYOR_BUILD_NUMBER)</PackageVersion>
      <PackageVersion Condition=" '$(PackageBuildIdentifier)' != '' ">$(PackageVersion)+$(PackageBuildIdentifier)</PackageVersion>
    </PropertyGroup>
    <!-- Debug Output -->
    <Message Importance="$(DebugMessageImportance)" Text="Adjusted Package Version For AppVeyor Feed:"/>
    <Message Importance="$(DebugMessageImportance)" Text="- PackageVersion : $(PackageVersion)"/>
  </Target>

</Project>
