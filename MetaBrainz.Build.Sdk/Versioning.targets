<?xml version="1.0" encoding="utf-8"?>
<!-- Deal With Versions (Assembly/Package). -->
<Project>

  <Target Name="_GetVCSInfo" DependsOnTargets="InitializeSourceControlInformation">
    <PropertyGroup>
      <_VCSBranchName />
      <_VCSInfo />
      <_VCSLocalChanges />
      <_VCSPullRequest />
      <_VCSRevision />
      <_VCSTagName />
      <_VCSPackageInfo />
    </PropertyGroup>
    <PropertyGroup>
      <!-- Get the revision ID (i.e. the commit hash) from SourceLink. -->
      <_VCSRevision Condition=" '$(SourceControlInformationFeatureSupported)' == 'true' And '$(SourceRevisionId)' != '' ">$(SourceRevisionId)</_VCSRevision>
    </PropertyGroup>
    <!-- TODO: Get info from git ourselves; SourceLink only provides the revision (commit hash). -->
    <PropertyGroup Condition=" '$(CI)' == 'true' And '$(GITHUB_ACTIONS)' == 'true' ">
      <!-- In the unlikely event that SourceLink fails, take the commit hash provided by GitHub Actions. -->
      <_VCSRevision Condition=" '$(GITHUB_SHA)' != '' And '$(_VCSRevision)' == '' ">$(GITHUB_SHA)</_VCSRevision>
      <!-- Get branch/tag info if available. -->
      <_VCSBranchName Condition=" '$(GITHUB_EVENT_NAME)' == 'pull_request' And '$(_VCSBranchName)' == '' ">$(GITHUB_BASE_REF)</_VCSBranchName>
      <_VCSBranchName Condition=" '$(GITHUB_REF_TYPE)' == 'branch' And '$(_VCSBranchName)' == '' ">$(GITHUB_REF_NAME)</_VCSBranchName>
      <_VCSPullRequest Condition=" '$(GITHUB_EVENT_NAME)' == 'pull_request' And '$(_VCSPullRequest)' == '' ">$(GITHUB_REF_NAME)</_VCSPullRequest>
      <_VCSPullRequest Condition=" $(_VCSPullRequest.StartsWith('refs/pull/')) ">$(_VCSPullRequest.Substring(10))</_VCSPullRequest>
      <_VCSPullRequest Condition=" $(_VCSPullRequest.EndsWith('/merge')) ">$(_VCSPullRequest.Remove($([MSBuild]::Subtract($(_VCSPullRequest.Length), 6))))</_VCSPullRequest>
      <_VCSTagName Condition=" '$(GITHUB_REF_TYPE)' == 'tag' And '$(_VCSTagName)' == '' ">$(GITHUB_REF_NAME)</_VCSTagName>
    </PropertyGroup>
    <PropertyGroup>
      <_VCSInfo Condition=" '$(_VCSTagName)' != '' ">tag $(_VCSTagName)</_VCSInfo>
      <_VCSInfo Condition=" '$(_VCSTagName)' == '' ">commit $(_VCSRevision)</_VCSInfo>
      <_VCSInfo Condition=" '$(_VCSBranchName)' != '' ">$(_VCSInfo) on $(_VCSBranchName)</_VCSInfo>
      <_VCSInfo Condition=" '$(_VCSPullRequest)' != '' ">$(_VCSInfo) for PR #$(_VCSPullRequest)</_VCSInfo>
    </PropertyGroup>
    <PropertyGroup>
      <_VCSPackageInfo Condition=" '$(_VCSPackageInfo)' != '' And '$(_VCSPullRequest)' != '' ">$(_VCSPackageInfo).</_VCSPackageInfo>
      <_VCSPackageInfo Condition=" '$(_VCSPullRequest)' != '' ">pr.$(_VCSPullRequest)</_VCSPackageInfo>
    </PropertyGroup>
  </Target>

  <Target Name="_ShowVCSInfo" AfterTargets="_GetVCSInfo">
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSInfo)'         == '' " Text="No Version Control Information" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSInfo)'         != '' " Text="Version Control Information:" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSInfo)'         != '' " Text="- Description   : $(_VCSInfo)" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSLocalChanges)' != '' " Text="- Local Changes : $(_VCSLocalChanges)" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSRevision)'     != '' " Text="- Revision      : $(_VCSRevision)" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSBranchName)'   != '' " Text="- Branch        : $(_VCSBranchName)" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSPullRequest)'  != '' " Text="- Pull Request  : $(_VCSPullRequest)" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSTagName)'      != '' " Text="- Tag           : $(_VCSTagName)" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_VCSPackageInfo)'  != '' " Text="- Package Info  : $(_VCSPackageInfo)" />
  </Target>

  <Target Name="_GetCIBuildInfo">
    <PropertyGroup>
      <_CIBuildInfo />
      <_CIBuildPackageInfo />
    </PropertyGroup>
    <!-- CI: AppVeyor -->
    <PropertyGroup Condition=" '$(APPVEYOR)' == 'true' And '$(APPVEYOR_BUILD_NUMBER)' != '' ">
      <_CIBuildInfo>AppVeyor build #$(APPVEYOR_BUILD_NUMBER)</_CIBuildInfo>
      <_CIBuildPackageInfo>appveyor.$(APPVEYOR_BUILD_NUMBER)</_CIBuildPackageInfo>
    </PropertyGroup>
    <!-- CI: GitHub Actions -->
    <PropertyGroup Condition=" '$(CI)' == 'true' And '$(GITHUB_ACTIONS)' == 'true' And '$(GITHUB_RUN_NUMBER)' != '' ">
      <_CIBuildInfo>GitHub build #$(GITHUB_RUN_NUMBER)</_CIBuildInfo>
      <_CIBuildInfo Condition=" '$(GITHUB_RUN_ATTEMPT)' != '' And '$(GITHUB_RUN_ATTEMPT)' != '1' ">$(_CIBuildInfo), attempt #$(GITHUB_RUN_ATTEMPT)</_CIBuildInfo>
      <_CIBuildPackageInfo>github.$(GITHUB_RUN_NUMBER)</_CIBuildPackageInfo>
      <_CIBuildPackageInfo Condition=" '$(GITHUB_RUN_ATTEMPT)' != '' ">$(_CIBuildPackageInfo).$(GITHUB_RUN_ATTEMPT)</_CIBuildPackageInfo>
    </PropertyGroup>
    <!-- FIXME: If no CI applies, should this be flagged in metadata? -->
  </Target>

  <Target Name="_ShowCIBuildInfo" AfterTargets="_GetCIBuildInfo">
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_CIBuildInfo)'         == '' " Text="No CI Build Information" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_CIBuildInfo)'         != '' " Text="CI Build Information:" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_CIBuildInfo)'         != '' " Text="- Description  : $(_CIBuildInfo)" />
    <Message Importance="$(DebugMessageImportance)" Condition=" '$(_CIBuildPackageInfo)'  != '' " Text="- Package Info : $(_CIBuildPackageInfo)" />
  </Target>

  <Target Name="_ParseVersionSpecification">
    <!-- First Step: Split using a regex. -->
    <PropertyGroup>
      <_VersionRegex>^\s*((\d+[.]\d+)(?:[.]\d+)?)(-[a-z0-9]+(?:[.][a-z0-9]+)*)?\s*$</_VersionRegex>
      <_Version_Full>$([System.Text.RegularExpressions.Regex]::Match('$(Version)', '$(_VersionRegex)').Groups[1].Value)</_Version_Full>
      <_Version_API>$([System.Text.RegularExpressions.Regex]::Match('$(Version)', '$(_VersionRegex)').Groups[2].Value)</_Version_API>
      <_Version_Pre>$([System.Text.RegularExpressions.Regex]::Match('$(Version)', '$(_VersionRegex)').Groups[3].Value)</_Version_Pre>
    </PropertyGroup>
    <!-- Second Step: Ensure this matched a version part. -->
    <Error Text="Version ('$(Version)') not specified or invalid: must be of the form MAJOR.MINOR[.PATCH][-prerelease]"
           Condition=" '$(_Version_API)' == '' "/>
    <!-- Third Step: Use the Version class to canonicalize the values. -->
    <PropertyGroup>
      <_Version_API>$([System.Version]::Parse('$(_Version_API)').ToString(2))</_Version_API>
      <_Version_Full>$([System.Version]::Parse('$(_Version_Full).0').ToString(3))</_Version_Full>
    </PropertyGroup>
    <!-- Final Step: Update Version (Canonical Form). -->
    <PropertyGroup>
      <Version>$(_Version_Full)$(_Version_Pre)</Version>
    </PropertyGroup>
    <Message Importance="$(DebugMessageImportance)" Text="Canonical Version: $(Version)"/>
  </Target>

  <Target Name="_SetAssemblyInfoPropertiesFromVersion" BeforeTargets="GenerateAdditionalSources" DependsOnTargets="_GetVCSInfo; _GetCIBuildInfo; _ParseVersionSpecification">
    <PropertyGroup>
      <AssemblyVersion>$(_Version_API)</AssemblyVersion>
      <FileVersion>$(_Version_Full)</FileVersion>
      <InformationalVersion>$(Version)</InformationalVersion>
      <_ExtraInfo />
      <_ExtraInfo Condition=" '$(_VCSInfo)' != '' And '$(_ExtraInfo)' != '' ">$(_ExtraInfo); </_ExtraInfo>
      <_ExtraInfo Condition=" '$(_VCSInfo)' != '' ">$(_ExtraInfo)$(_VCSInfo)</_ExtraInfo>
      <_ExtraInfo Condition=" '$(_ExtraInfo)' != '' ">$(_ExtraInfo); </_ExtraInfo>
      <_ExtraInfo Condition=" '$(_CIBuildInfo)' != '' ">$(_ExtraInfo)$(_CIBuildInfo)</_ExtraInfo>
      <_ExtraInfo Condition=" '$(_CIBuildInfo)' == '' ">$(_ExtraInfo)local build</_ExtraInfo>
      <InformationalVersion Condition=" '$(_ExtraInfo)' != '' ">$(InformationalVersion) ($(_ExtraInfo))</InformationalVersion>
      <!-- We add VCS info, so we do not want the SDK to append the revision ID. -->
      <IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>
    </PropertyGroup>
    <!-- Debug Output -->
    <Message Importance="$(DebugMessageImportance)" Text="Assembly Info Properties:"/>
    <Message Importance="$(DebugMessageImportance)" Text="- AssemblyVersion      : $(AssemblyVersion)"/>
    <Message Importance="$(DebugMessageImportance)" Text="- FileVersion          : $(FileVersion)"/>
    <Message Importance="$(DebugMessageImportance)" Text="- InformationalVersion : $(InformationalVersion)"/>
  </Target>

  <PropertyGroup>
    <!-- This ensures the PackageVersion computation is run both when building a project's package and when resolving a project reference to a package reference. -->
    <GetPackageVersionDependsOn>$(GetPackageVersionDependsOn); _SetPackagePropertiesFromVersion</GetPackageVersionDependsOn>
  </PropertyGroup>

  <Target Name="_SetPackagePropertiesFromVersion" DependsOnTargets="_GetVCSInfo; _GetCIBuildInfo; _ParseVersionSpecification" Condition=" '$(IsPackable)' != 'False' ">
    <PropertyGroup>
      <_ExtraPackageInfo />
      <_ExtraPackageInfo Condition=" '$(_VCSPackageInfo)' != '' And '$(_ExtraPackageInfo)' != '' ">$(_ExtraPackageInfo).</_ExtraPackageInfo>
      <_ExtraPackageInfo Condition=" '$(_VCSPackageInfo)' != '' ">$(_ExtraPackageInfo)$(_VCSPackageInfo)</_ExtraPackageInfo>
      <_ExtraPackageInfo Condition=" '$(_ExtraPackageInfo)' != '' ">$(_ExtraPackageInfo).</_ExtraPackageInfo>
      <_ExtraPackageInfo Condition=" '$(_CIBuildPackageInfo)' != '' ">$(_ExtraPackageInfo)$(_CIBuildPackageInfo)</_ExtraPackageInfo>
      <_ExtraPackageInfo Condition=" '$(_CIBuildPackageInfo)' == '' ">$(_ExtraPackageInfo)local.$([System.DateTime]::UtcNow.ToString('yyyyMMdd.HHmmssff'))</_ExtraPackageInfo>
      <PackageVersion>$(Version)</PackageVersion>
      <PackageVersion Condition=" '$(_ExtraPackageInfo)' != '' And !$(_Version_Pre.Contains('-')) ">$(PackageVersion)+$(_ExtraPackageInfo)</PackageVersion>
      <PackageVersion Condition=" '$(_ExtraPackageInfo)' != '' And  $(_Version_Pre.Contains('-')) ">$(PackageVersion).$(_ExtraPackageInfo)</PackageVersion>
    </PropertyGroup>
    <!-- Debug Output -->
    <Message Importance="$(DebugMessageImportance)" Text="Package Properties:"/>
    <Message Importance="$(DebugMessageImportance)" Text="- PackageVersion : $(PackageVersion)"/>
  </Target>

</Project>
